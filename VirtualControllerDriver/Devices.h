#pragma once

// Gamepad.h

#define GPONE_VendorID 0x04b9   /* Generic */
#define GPONE_ProductID 0x0001
#define GPONE_VersionNumber 1
#define GPONE_Manufacturer "Silly Utility"
#define GPONE_Product "Gamepad One"
#define GPONE_SerialNumber "S261f2b80a52"
#define GPONE_CountryCode 0     /* NotLocalized=0, (US=33) */
#define GPONE_LocationID 0
#define GPONE_PrimaryUsagePage (0x01) /* GenericDesktop=0x01 */
#define GPONE_PrimaryUsage (0x05) /* GamePad=0x05 */

// AUTO-GENERATED by WaratahCmd.exe (https://github.com/microsoft/hidtools)

// HID Usage Tables: 1.6.0
// Descriptor size: 48 (bytes)
// +----------+-------+-------------------+
// | ReportId | Kind  | ReportSizeInBytes |
// +----------+-------+-------------------+
// |        1 | Input |                 2 |
// +----------+-------+-------------------+
static const uint8_t hidReportDescriptor[] =
{
    0x05, 0x01,    // UsagePage(Generic Desktop[0x0001])
    0x09, 0x05,    // UsageId(Gamepad[0x0005])
    0xA1, 0x01,    // Collection(Application)
    0x85, 0x01,    //     ReportId(1)
    0x09, 0x01,    //     UsageId(Pointer[0x0001])
    0xA1, 0x00,    //     Collection(Physical)
    0x09, 0x30,    //         UsageId(X[0x0030])
    0x09, 0x31,    //         UsageId(Y[0x0031])
    0x15, 0xFF,    //         LogicalMinimum(-1)
    0x25, 0x01,    //         LogicalMaximum(1)
    0x95, 0x02,    //         ReportCount(2)
    0x75, 0x02,    //         ReportSize(2)
    0x81, 0x02,    //         Input(Data, Variable, Absolute, NoWrap, Linear, PreferredState, NoNullPosition, BitField)
    0xC0,          //     EndCollection()
    0x05, 0x09,    //     UsagePage(Button[0x0009])
    0x19, 0x01,    //     UsageIdMin(Button 1[0x0001])
    0x29, 0x06,    //     UsageIdMax(Button 6[0x0006])
    0x15, 0x00,    //     LogicalMinimum(0)
    0x95, 0x06,    //     ReportCount(6)
    0x75, 0x01,    //     ReportSize(1)
    0x81, 0x02,    //     Input(Data, Variable, Absolute, NoWrap, Linear, PreferredState, NoNullPosition, BitField)
    0x95, 0x01,    //     ReportCount(1)
    0x75, 0x06,    //     ReportSize(6)
    0x81, 0x03,    //     Input(Constant, Variable, Absolute, NoWrap, Linear, PreferredState, NoNullPosition, BitField)
    0xC0,          // EndCollection()
};

#if 0
#pragma pack(push,1)

#define HID_REPORT_INPUT1_ID (1)
struct HidReportInput1
{
   uint8_t ReportId = HID_REPORT_INPUT1_ID;
   uint8_t Payload[2];
};

#pragma pack(pop)
#endif


// 9ES.h

#define NINE_ES_VendorID 0x04b9   /* Generic */
#define NINE_ES_ProductID 0x0002
#define NINE_ES_VersionNumber 1
#define NINE_ES_Manufacturer "Silly Utility"
#define NINE_ES_Product "9ES Controller"
#define NINE_ES_SerialNumber "S0ffdebc8b4a"
#define NINE_ES_CountryCode 0     /* NotLocalized=0, (US=33) */
#define NINE_ES_LocationID 0
#define NINE_ES_PrimaryUsagePage (0x01) /* GenericDesktop=0x01 */
#define NINE_ES_PrimaryUsage (0x05) /* GamePad=0x05 */

// AUTO-GENERATED by WaratahCmd.exe (https://github.com/microsoft/hidtools)

// HID Usage Tables: 1.6.0
// Descriptor size: 41 (bytes)
// +----------+-------+-------------------+
// | ReportId | Kind  | ReportSizeInBytes |
// +----------+-------+-------------------+
// |        1 | Input |                 1 |
// +----------+-------+-------------------+
static const uint8_t NineES_HIDReportDescriptor[] =
{
    0x05, 0x01,    // UsagePage(Generic Desktop[0x0001])
    0x09, 0x05,    // UsageId(Gamepad[0x0005])
    0xA1, 0x01,    // Collection(Application)
    0x85, 0x01,    //     ReportId(1)
    0x09, 0x90,    //     UsageId(D-pad Up[0x0090])
    0x09, 0x91,    //     UsageId(D-pad Down[0x0091])
    0x09, 0x93,    //     UsageId(D-pad Left[0x0093])
    0x09, 0x92,    //     UsageId(D-pad Right[0x0092])
    0x09, 0x3E,    //     UsageId(Select[0x003E])
    0x09, 0x3D,    //     UsageId(Start[0x003D])
    0x15, 0x00,    //     LogicalMinimum(0)
    0x25, 0x01,    //     LogicalMaximum(1)
    0x95, 0x06,    //     ReportCount(6)
    0x75, 0x01,    //     ReportSize(1)
    0x81, 0x02,    //     Input(Data, Variable, Absolute, NoWrap, Linear, PreferredState, NoNullPosition, BitField)
    0x05, 0x09,    //     UsagePage(Button[0x0009])
    0x19, 0x01,    //     UsageIdMin(Button 1[0x0001])
    0x29, 0x02,    //     UsageIdMax(Button 2[0x0002])
    0x95, 0x02,    //     ReportCount(2)
    0x81, 0x02,    //     Input(Data, Variable, Absolute, NoWrap, Linear, PreferredState, NoNullPosition, BitField)
    0xC0,          // EndCollection()
};

#if 0
#pragma pack(push,1)

#define NINE_ES_HID_REPORT_INPUT1_ID (1)
struct Nine_ES_HidReportInput1
{
    uint8_t ReportId = NINE_ES_HID_REPORT_INPUT1_ID;
    uint8_t Payload[1];
};

#pragma pack(pop)
#endif

typedef struct __attribute__((packed)) {
    uint8_t ReportID;
    uint8_t DPad_Up    : 1;
    uint8_t DPad_Down  : 1;
    uint8_t DPad_Left  : 1;
    uint8_t DPad_Right : 1;
    uint8_t Select     : 1;
    uint8_t Start      : 1;
    uint8_t Button_A   : 1;
    uint8_t Button_B   : 1;
} NineES_HIDInputReport1;
